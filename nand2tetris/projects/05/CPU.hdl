// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // parse the instruction with instruction[15]
    // if A instruction, load the a register with the value

    Mux16(a=instruction,b=outALU,sel=instruction[15],out=outARegMux);
    //should load A Register if A instruction OR d3 bit set to 1 and C instruction
    
    And(a=instruction[15],b=instruction[5],out=shouldLoadIntoARegister);
    And(a=instruction[15],b=instruction[4],out=shouldLoadIntoDRegister);

    // WriteM will be set to the 3rd destination bit and C instruction
    And(a=instruction[15],b=instruction[3],out=writeM);



    Not(in=instruction[15],out=isAInstruction);

    Or(a=isAInstruction,b=shouldLoadIntoARegister,out=shouldLoadARegister);

    Register(in=outARegMux,load=shouldLoadARegister,out=outARegister,out[0..14]=addressM); // A Register and AddressM

    Register(in=outALU,load=shouldLoadIntoDRegister,out=outDRegister); // D Register

    // program counter should load if there is a jump, otherwise should inc, depends on ALU output

    // selecting whether to use A register value to ALU if A bit is set on C instruction
    // bit 12 and bit 15 are high

    And(a=instruction[12],b=instruction[15],out=shouldLoadARegisterIntoALU);
    
    Mux16(a=outARegister,b=inM,sel=shouldLoadARegisterIntoALU,out=outAInMux);

    ALU(x=outDRegister, y=outAInMux,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outALU,out[15]=negOrPos,out[0..7]=outFirstHalf,out[8..15]=outSecondHalf,zr=isZero,ng=isNegative);
    // if ALU MSB is high then is negative MSB is low then can be 0 or positive, 

    Not(in=negOrPos,out=isNotNegative);

    Or8Way(in=outFirstHalf,out=lowerBitsPositive);
    Or8Way(in=outSecondHalf,out=upperBitsSet);
    Or(a=lowerBitsPositive,b=upperBitsSet,out=someBitsSet);

    // out > 0
    And(a=isNotNegative,b=someBitsSet,out=greaterThanZero);

    // out < 0

    // change this for ZR and NG flags on ALU

    // 3 ANDs for each jump bit then combine into OR for load

    And(a=isNegative,b=instruction[2],out=shouldJumpNegative);
    And(a=isZero,b=instruction[1],out=shouldJumpZero);
    And(a=greaterThanZero,b=instruction[0],out=shouldJumpPositive);

    // should Jump is C instruction and 1 jump condition fired;
    Or(a=shouldJumpNegative,b=shouldJumpPositive,out=shouldJumpNegPos);
    Or(a=shouldJumpNegPos,b=shouldJumpZero,out=shouldJump);
    And(a=instruction[15],b=shouldJump,out=shouldLoad);
    Not(in=shouldLoad,out=shouldInc);


    PC(in=outARegister, load=shouldLoad,inc=shouldInc,reset=reset,out[0..14]=pc);

    

}