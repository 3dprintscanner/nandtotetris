// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    // check reset

    Mux16(a=in,b=false,sel=reset,out=checkReset);

    // reset takes precedence over everything

    Mux16(a=in,b=checkReset,sel=reset,out=loadOrResetMux);

    // check whether we return the last result or a new one
    
    Or(a=load,b=reset,out=loadOrReset);

    Or(a=loadOrReset,b=inc,out=shouldChangeOutput);
    

    // whether the last result is passed into the adder or not

    Not(in=loadOrReset,out=notLoadOrReset);

    And(a=notLoadOrReset,b=inc,out=shouldIncrement);

    Mux16(a=outRegisterVals,b=loadOrResetMux,sel=loadOrReset,out=savedOrLoadResetRegister);

    Add16(a=savedOrLoadResetRegister,b[0]=shouldIncrement,b[1..15]=false,out=addInternalRegister);

    Register(in=addInternalRegister,load=shouldChangeOutput,out[0..15]=outRegisterVals,out[0..15]=out);

    // split outRegistervals to out and back to the outRegisterVals to save the last output
    
}
